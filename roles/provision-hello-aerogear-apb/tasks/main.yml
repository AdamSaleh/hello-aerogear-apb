#############################################################################
# Provision hello-aerogear
# This role executes much of the needed functionality to provision an
# application using an Ansible Playbook Bundle.  Included in the comments
# below are some sample resources for getting started deploying an application
# to OpenShift.
#############################################################################


#############################################################################
# An OpenShift Origin deployment configuration provides a replication
# controller, spins up pods, and also provides the ability to transition from
# one deployment of an image to a new one.
# https://docs.openshift.org/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations
#############################################################################
- name: create deployment config
  openshift_v1_deployment_config:
    name: hello-aerogear
    namespace: '{{ namespace }}'
    labels:
      app: hello-aerogear
      service: hello-aerogear
    replicas: 1
    selector:
      app: hello-aerogear
      service: hello-aerogear
    spec_template_metadata_labels:
      app: hello-aerogear
      service: hello-aerogear
    containers:
    - env:
      image: docker.io/ansibleplaybookbundle/hello-world:latest
      name: hello-aerogear
      ports:
      - container_port: 8080
        protocol: TCP


#############################################################################
# A Kubernetes service serves as an internal load balancer.  It identifies a
# set of replicated pods in order to proxy the connections it receives to them.
# https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html#services
#############################################################################
- name: create hello-aerogear service
  k8s_v1_service:
    name: hello-aerogear
    namespace: '{{ namespace }}'
    labels:
      app: hello-aerogear
      service: hello-aerogear
    selector:
      app: hello-aerogear
      service: hello-aerogear
    ports:
      - name: web
        port: 8080
        target_port: 8080


#############################################################################
# An OpenShift Origin route exposes a service at a host name, so that external
# clients can reach it by name. Each route consists of a name, a service
# selector, and an optional security configuration.
# https://docs.openshift.org/latest/architecture/core_concepts/routes.html
#############################################################################
- name: create hello-aerogear route
  openshift_v1_route:
    name: hello-aerogear
    namespace: '{{ namespace }}'
    spec_port_target_port: web
    labels:
      app: hello-aerogear
      service: hello-aerogear
    to_name: hello-aerogear

- name: "Retrieve route"
  shell: "oc get routes hello-aerogear -n '{{ namespace }}' -o jsonpath='{.spec.host}'"
  register: hello_aerogear_route


#############################################################################
# A label to be used with aerogear's mobile-cli
#############################################################################
- name: "Get the name of the service instance"
  shell: oc get serviceinstance --namespace={{ namespace }} -o jsonpath='{.items[?(@.spec.externalID=="{{ _apb_service_instance_id }}")].metadata.name}'
  when: _apb_service_instance_id is defined
  register: service_instance_name

- name: "Label the service instance with the service name"
  shell: oc label serviceinstance '{{ service_instance_name.stdout }}' serviceName=hello-aerogear-apb --namespace={{ namespace }}
  when: _apb_service_instance_id is defined

#############################################################################
# A client config map to be used with aerogear's mobile-cli
# https://github.com/aerogear/proposals/blob/master/apbs/create-secret-and-configmap-during-provision.md
#############################################################################

- name: Create client config template
  template:
    src: configmap.yml.j2
    dest: /tmp/configmap.yaml

- name: "Create fh-sync-server secret yaml file"
  template:
    src: secret.yml.j2
    dest: /tmp/secret.yaml

- name: "Create FH Sync-server secret"
  shell: "oc create -f /tmp/configmap.yaml -n {{ namespace }} && oc create -f /tmp/secret.yaml -n {{ namespace }}"
